# The main TNS trie maps 64-bit identifiers to Catena chains that contain name metadata. The 64-bit identifiers are simply the first 64 bits of the name.
# This file is for the covenant encumbering all trie edges.


# Gets the current level. 0 means that we are at the leaves
def current_level() : Nat = 
    let data = env_parent_data()  in
    assert! data is %[1] in
    data[0]
    
- - -
let current_level = current_level() in
if current_level == 0 then
    # Leaf logic: we ensure that the remaining 192 bits (24 bytes) of the name hash are in the spender's data field, and that the first output of the spender is denominated in new-token and has value 1
    let outputs = env_spender_tx().outputs in
        outputs is [CoinData; 1] &&
        blen(outputs[0].denom) == 0 && 
        outputs[0].value == 1 &&
        let x = env_spender_tx().data in x is %[24]
else
    # Internal logic: spender must have 256 children, all of which must replicate and decrease the level.
    let outputs = env_spender_tx().outputs in
    vlen(outputs) == 256 &&
    for output in unsafe outputs :! [CoinData; 256] # we do this instead of checking that the type is [CoinData; 256]
    fold accum = 1 :: {0..1} with                    # to work around bad code generation for type checks
        accum && b2n(output.covhash) == b2n(env_self_hash()) &&
            let next_data = output.additional_data in
            next_data is %[1] && next_data[0] == current_level - 1